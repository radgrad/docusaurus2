(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{140:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),i=(n(0),n(345)),s={title:"Degree Experience Planner Reference Guide",sidebar_label:"Degree Experience Planner"},c={unversionedId:"developers/reference/degree-experience-planner",id:"developers/reference/degree-experience-planner",isDocsHomePage:!1,title:"Degree Experience Planner Reference Guide",description:"The following is a quick reference to the StudentDegreePlannerPage.",source:"@site/docs/developers/reference/degree-experience-planner.md",slug:"/developers/reference/degree-experience-planner",permalink:"/docs/developers/reference/degree-experience-planner",version:"current",lastUpdatedBy:"Cam Moore",lastUpdatedAt:1620511989,sidebar_label:"Degree Experience Planner",sidebar:"mainSidebar",previous:{title:"Overview of the Reference Guide",permalink:"/docs/developers/reference/overview"},next:{title:"Sustainability Plan",permalink:"/docs/administrators/overview"}},l=[{value:"Sticky State",id:"sticky-state",children:[{value:"StudentDegreePlannerPage",id:"studentdegreeplannerpage",children:[]},{value:"DegreeExperiencePlanner",id:"degreeexperienceplanner",children:[]},{value:"TabbedProfileEntries",id:"tabbedprofileentries",children:[]},{value:"DepDetailsCard",id:"depdetailscard",children:[]}]},{value:"Drag and Drop",id:"drag-and-drop",children:[{value:"StudentDegreePlannerPage",id:"studentdegreeplannerpage-1",children:[]},{value:"AcademicTermView",id:"academictermview",children:[]},{value:"DraggableCourseInstancePill and DraggableOpportunityInstancePill",id:"draggablecourseinstancepill-and-draggableopportunityinstancepill",children:[]}]}],o={rightToc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The following is a quick reference to the StudentDegreePlannerPage."),Object(i.b)("h2",{id:"sticky-state"},"Sticky State"),Object(i.b)("p",null,"We are using three ",Object(i.b)("inlineCode",{parentName:"p"},"StickyState")," variables to share state across the Degree Experience Planner components. The three state names are defined in the ",Object(i.b)("inlineCode",{parentName:"p"},"DegreePlannerStateNames")," enum."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),"export enum DegreePlannerStateNames {\n  selectedCiID = 'Planner.selectedCiID',\n  selectedOiID = 'Planner.selectedOiID',\n  selectedProfileTab = 'Planner.selectedProfileTab',\n}\n")),Object(i.b)("h3",{id:"studentdegreeplannerpage"},"StudentDegreePlannerPage"),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/radgrad/radgrad2/blob/master/app/imports/ui/pages/student/StudentDegreePlannerPage.tsx"}),Object(i.b)("inlineCode",{parentName:"a"},"StudentDegreePlannerPage.tsx"))," just uses the set methods. It doesn't actually care what the state values are."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),"  const [, setSelectedCiID] = useStickyState(DegreePlannerStateNames.selectedCiID, '');\n  const [, setSelectedOiID] = useStickyState(DegreePlannerStateNames.selectedOiID, '');\n  const [, setSelectedProfileTab] = useStickyState(DegreePlannerStateNames.selectedProfileTab, '');\n")),Object(i.b)("p",null,"We pass these set methods are passed into the ",Object(i.b)("inlineCode",{parentName:"p"},"onDragEnd")," method by using a higher order method."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),"const onDragEnd = (onDragEndProps) => (result) => {\n  const { match, setSelectedCiID, setSelectedOiID, setSelectedProfileTab } = onDragEndProps;\n...\n}\n")),Object(i.b)("p",null,"We use the ",Object(i.b)("inlineCode",{parentName:"p"},"setSelectedCiID"),", ",Object(i.b)("inlineCode",{parentName:"p"},"setSelectedOiID"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"setSelectedProfileTab")," in the onDragEnd method to tell the ",Object(i.b)("inlineCode",{parentName:"p"},"TabbedProfileEntries.tsx")," what to display."),Object(i.b)("h3",{id:"degreeexperienceplanner"},"DegreeExperiencePlanner"),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/radgrad/radgrad2/blob/master/app/imports/ui/components/student/degree-planner/DegreeExperiencePlanner.tsx"}),Object(i.b)("inlineCode",{parentName:"a"},"DegreeExperiencePlanner"))," also uses the StickyState set methods to tell the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/radgrad/radgrad2/blob/master/app/imports/ui/components/student/degree-planner/TabbedProfileEntries.tsx"}),Object(i.b)("inlineCode",{parentName:"a"},"TabbedProfileEntries"))," what is selected."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),"  const [, setSelectedCiID] = useStickyState(DegreePlannerStateNames.selectedCiID, '');\n  const [, setSelectedOiID] = useStickyState(DegreePlannerStateNames.selectedOiID, '');\n  const [, setSelectedProfileTab] = useStickyState(DegreePlannerStateNames.selectedProfileTab, '');\n")),Object(i.b)("h3",{id:"tabbedprofileentries"},"TabbedProfileEntries"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"TabbedProfileEntries")," defines the names of the individual tabs in an exported enum ",Object(i.b)("inlineCode",{parentName:"p"},"TabbedProfileEntryNames"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),"export enum TabbedProfileEntryNames {\n  profileCourses = 'PROFILE_COURSES',\n  profileOpportunities = 'PROFILE_OPPORTUNITIES',\n  profileDetails = 'PROFILE_DETAILS',\n}\n")),Object(i.b)("p",null,"It only cares about the selected tab state."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),"  const [selectedTab, setSelectedTab] = useStickyState(DegreePlannerStateNames.selectedProfileTab, TabbedProfileEntryNames.profileOpportunities);\n")),Object(i.b)("p",null,"When the student clicks on a tab we use the ",Object(i.b)("inlineCode",{parentName:"p"},"setSelectedTab")," method to update the selectedTab."),Object(i.b)("h3",{id:"depdetailscard"},"DepDetailsCard"),Object(i.b)("p",null,"Uses the ",Object(i.b)("inlineCode",{parentName:"p"},"selectedCourse")," and ",Object(i.b)("inlineCode",{parentName:"p"},"selectedOpportunity")," state to decide what to show."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),"  const [selectedCourse] = useStickyState(DegreePlannerStateNames.selectedCiID, '');\n  const [selectedOpportunity] = useStickyState(DegreePlannerStateNames.selectedOiID, '');\n  const courseP = selectedCourse !== '';\n  ...\n  return courseP ? <DetailCourseCard instance={instance as CourseInstance} /> : <DetailOpportunityCard instance={instance as OpportunityInstance} verificationRequests={verificationRequests} />;\n")),Object(i.b)("h2",{id:"drag-and-drop"},"Drag and Drop"),Object(i.b)("p",null,"We are using ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/atlassian/react-beautiful-dnd"}),"react-beautiful-dnd")," for our drag and drop needs."),Object(i.b)("h3",{id:"studentdegreeplannerpage-1"},"StudentDegreePlannerPage"),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/radgrad/radgrad2/blob/master/app/imports/ui/pages/student/StudentDegreePlannerPage.tsx"}),Object(i.b)("inlineCode",{parentName:"a"},"StudentDegreePlannerPage"))," wraps the entire page in a ",Object(i.b)("inlineCode",{parentName:"p"},"DragDropContext"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),"return (\n  <DragDropContext onDragEnd={onDragEnd(onDragEndProps)}>\n    ...\n  </DragDropContext>\n);\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"onDragEnd")," is our higher order function that passes in the sticky state set methods. By wrapping the entire page in the ",Object(i.b)("inlineCode",{parentName:"p"},"DragDropContext"),", we can drag items between the different components on the page. The ",Object(i.b)("inlineCode",{parentName:"p"},"onDragEnd")," method handles all the drop events. It stops the students from doing incorrect things to their degree plan. It creates the CourseInstances and OpportunityInstances on a valid drop. See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/radgrad/radgrad2/blob/4cfa592af7f2207d6b3ef44c789fe3ffbc14f0a4/app/imports/ui/pages/student/StudentDegreePlannerPage.tsx#L57-L181"}),"onDragEnd")," for the current code."),Object(i.b)("h3",{id:"academictermview"},"AcademicTermView"),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/radgrad/radgrad2/blob/master/app/imports/ui/components/student/degree-planner/AcademicTermView.tsx"}),Object(i.b)("inlineCode",{parentName:"a"},"AcademicTermView"))," defines the ",Object(i.b)("inlineCode",{parentName:"p"},"Droppable")," that allow students to drop course or opportunities into an academic term."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),'<Droppable droppableId={`${termSlug}`}>\n  {(provided, snapshot) => (\n    <div ref={provided.innerRef} style={getDroppableListStyle(snapshot.isDraggingOver)}>\n      {courseInstancesToShow.map((ci, index) => (\n        <DraggableCourseInstancePill key={ci._id} instance={ci} index={index} inPast={inPast}\n                                     handleClickCourseInstance={handleClickCourseInstance} />\n      ))}\n      {opportunityInstancesToShow.map((oi, index) => (\n        <DraggableOpportunityInstancePill key={oi._id} instance={oi}\n                                          index={courseInstancesToShow.length + index}\n                                          handleClickOpportunityInstance={handleClickOpportunityInstance} />\n      ))}\n      {provided.placeholder}\n      <Icon name="plus circle" color="grey" /> Drag Here\n    </div>\n  )}\n</Droppable>\n')),Object(i.b)("h3",{id:"draggablecourseinstancepill-and-draggableopportunityinstancepill"},"DraggableCourseInstancePill and DraggableOpportunityInstancePill"),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/radgrad/radgrad2/blob/master/app/imports/ui/components/student/degree-planner/DraggableCourseInstancePill.tsx"}),"DraggableCourseInstancePill")," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/radgrad/radgrad2/blob/master/app/imports/ui/components/student/degree-planner/DraggableOpportunityInstancePill.tsx"}),"DraggableOpportunityInstancePill")," define the ",Object(i.b)("inlineCode",{parentName:"p"},"Draggable")," elements."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:"jsx",jsx:!0}),"<Draggable key={instance._id} draggableId={instance._id} index={index}>\n  {(prov, snap) => (\n    <div ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps} style={getDraggablePillStyle(snap.isDragging, prov.draggableProps.style)}>\n      <Grid>\n        <Grid.Row style={{ paddingTop: 7, paddingBottom: 7 }}>\n          <Grid.Column width={13} onClick={handleClick(instance, handleClickCourseInstance)}>\n            <NamePill name={instance.note} />\n          </Grid.Column>\n          <Grid.Column width={2}>{inPast ? '' : <RemoveItWidget collectionName=\"CourseInstanceCollection\" id={instance._id} name={getName(instance)} courseNumber={instance.note} />}</Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  )}\n</Draggable>\n")))}p.isMDXComponent=!0},345:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return g}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,g=d["".concat(s,".").concat(u)]||d[u]||b[u]||i;return n?r.a.createElement(g,c(c({ref:t},o),{},{components:n})):r.a.createElement(g,c({ref:t},o))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var o=2;o<i;o++)s[o]=n[o];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);